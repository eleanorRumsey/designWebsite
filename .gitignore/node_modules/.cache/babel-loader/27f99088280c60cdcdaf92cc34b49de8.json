{"ast":null,"code":"import invariant from '../utils/invariant';\n/**\n * Simple helper that gets a single screen (React component or navigator)\n * out of the navigator config.\n */\n\nexport default function getScreenForRouteName(routeConfigs, routeName) {\n  const routeConfig = routeConfigs[routeName];\n\n  if (!routeConfig) {\n    throw new Error(`There is no route defined for key ${routeName}.\\n` + `Must be one of: ${Object.keys(routeConfigs).map(a => `'${a}'`).join(',')}`);\n  }\n\n  if (routeConfig.screen) {\n    return routeConfig.screen;\n  }\n\n  if (typeof routeConfig.getScreen === 'function') {\n    const screen = routeConfig.getScreen();\n    invariant(typeof screen === 'function', `The getScreen defined for route '${routeName} didn't return a valid ` + 'screen or navigator.\\n\\n' + 'Please pass it like this:\\n' + `${routeName}: {\\n  getScreen: () => require('./MyScreen').default\\n}`);\n    return screen;\n  }\n\n  return routeConfig;\n}","map":{"version":3,"sources":["/Users/eleanor/portfolio/node_modules/react-navigation/src/routers/getScreenForRouteName.js"],"names":["invariant","getScreenForRouteName","routeConfigs","routeName","routeConfig","Error","Object","keys","map","a","join","screen","getScreen"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AAEA;;;;;AAIA,eAAe,SAASC,qBAAT,CAA+BC,YAA/B,EAA6CC,SAA7C,EAAwD;AACrE,QAAMC,WAAW,GAAGF,YAAY,CAACC,SAAD,CAAhC;;AAEA,MAAI,CAACC,WAAL,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CACH,qCAAoCF,SAAU,KAA/C,GACG,mBAAkBG,MAAM,CAACC,IAAP,CAAYL,YAAZ,EAChBM,GADgB,CACZC,CAAC,IAAK,IAAGA,CAAE,GADC,EAEhBC,IAFgB,CAEX,GAFW,CAEN,EAJX,CAAN;AAMD;;AAED,MAAIN,WAAW,CAACO,MAAhB,EAAwB;AACtB,WAAOP,WAAW,CAACO,MAAnB;AACD;;AAED,MAAI,OAAOP,WAAW,CAACQ,SAAnB,KAAiC,UAArC,EAAiD;AAC/C,UAAMD,MAAM,GAAGP,WAAW,CAACQ,SAAZ,EAAf;AACAZ,IAAAA,SAAS,CACP,OAAOW,MAAP,KAAkB,UADX,EAEN,oCAAmCR,SAAU,yBAA9C,GACE,0BADF,GAEE,6BAFF,GAGG,GAAEA,SAAU,0DALR,CAAT;AAOA,WAAOQ,MAAP;AACD;;AAED,SAAOP,WAAP;AACD","sourcesContent":["import invariant from '../utils/invariant';\n\n/**\n * Simple helper that gets a single screen (React component or navigator)\n * out of the navigator config.\n */\nexport default function getScreenForRouteName(routeConfigs, routeName) {\n  const routeConfig = routeConfigs[routeName];\n\n  if (!routeConfig) {\n    throw new Error(\n      `There is no route defined for key ${routeName}.\\n` +\n        `Must be one of: ${Object.keys(routeConfigs)\n          .map(a => `'${a}'`)\n          .join(',')}`\n    );\n  }\n\n  if (routeConfig.screen) {\n    return routeConfig.screen;\n  }\n\n  if (typeof routeConfig.getScreen === 'function') {\n    const screen = routeConfig.getScreen();\n    invariant(\n      typeof screen === 'function',\n      `The getScreen defined for route '${routeName} didn't return a valid ` +\n        'screen or navigator.\\n\\n' +\n        'Please pass it like this:\\n' +\n        `${routeName}: {\\n  getScreen: () => require('./MyScreen').default\\n}`\n    );\n    return screen;\n  }\n\n  return routeConfig;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\nexport default function getChildEventSubscriber(addListener, key) {\n  const actionSubscribers = new Set();\n  const willFocusSubscribers = new Set();\n  const didFocusSubscribers = new Set();\n  const willBlurSubscribers = new Set();\n  const didBlurSubscribers = new Set();\n\n  const getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n\n      case 'willFocus':\n        return willFocusSubscribers;\n\n      case 'didFocus':\n        return didFocusSubscribers;\n\n      case 'willBlur':\n        return willBlurSubscribers;\n\n      case 'didBlur':\n        return didBlurSubscribers;\n\n      default:\n        return null;\n    }\n  };\n\n  const emit = (type, payload) => {\n    const payloadWithType = { ...payload,\n      type\n    };\n    const subscribers = getChildSubscribers(type);\n    subscribers && subscribers.forEach(subs => {\n      subs(payloadWithType);\n    });\n  }; // lastEmittedEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n\n\n  let lastEmittedEvent = 'didBlur';\n\n  const cleanup = () => {\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  const upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'action'];\n  const upstreamSubscribers = upstreamEvents.map(eventName => addListener(eventName, payload => {\n    const state = payload.state,\n          lastState = payload.lastState,\n          action = payload.action;\n    const lastRoutes = lastState && lastState.routes;\n    const routes = state && state.routes;\n    const lastFocusKey = lastState && lastState.routes && lastState.routes[lastState.index].key;\n    const focusKey = routes && routes[state.index].key;\n    const isChildFocused = focusKey === key;\n    const lastRoute = lastRoutes && lastRoutes.find(route => route.key === key);\n    const newRoute = routes && routes.find(route => route.key === key);\n    const childPayload = {\n      context: `${key}:${action.type}_${payload.context || 'Root'}`,\n      state: newRoute,\n      lastState: lastRoute,\n      action,\n      type: eventName\n    };\n    const isTransitioning = !!state && state.isTransitioning;\n    const previouslyLastEmittedEvent = lastEmittedEvent;\n\n    if (lastEmittedEvent === 'didBlur') {\n      // The child is currently blurred. Look for willFocus conditions\n      if (eventName === 'willFocus' && isChildFocused) {\n        emit(lastEmittedEvent = 'willFocus', childPayload);\n      } else if (eventName === 'action' && isChildFocused) {\n        emit(lastEmittedEvent = 'willFocus', childPayload);\n      }\n    }\n\n    if (lastEmittedEvent === 'willFocus') {\n      // We are currently mid-focus. Look for didFocus conditions.\n      // If state.isTransitioning is false, this child event happens immediately after willFocus\n      if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n        emit(lastEmittedEvent = 'didFocus', childPayload);\n      } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n        emit(lastEmittedEvent = 'didFocus', childPayload);\n      }\n    }\n\n    if (lastEmittedEvent === 'didFocus') {\n      // The child is currently focused. Look for blurring events\n      if (!isChildFocused) {\n        // The child is no longer focused within this navigation state\n        emit(lastEmittedEvent = 'willBlur', childPayload);\n      } else if (eventName === 'willBlur') {\n        // The parent is getting a willBlur event\n        emit(lastEmittedEvent = 'willBlur', childPayload);\n      } else if (eventName === 'action' && previouslyLastEmittedEvent === 'didFocus') {\n        // While focused, pass action events to children for grandchildren focus\n        emit('action', childPayload);\n      }\n    }\n\n    if (lastEmittedEvent === 'willBlur') {\n      // The child is mid-blur. Wait for transition to end\n      if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n        // The child is done blurring because transitioning is over, or isTransitioning\n        // never began and didBlur fires immediately after willBlur\n        emit(lastEmittedEvent = 'didBlur', childPayload);\n      } else if (eventName === 'didBlur') {\n        // Pass through the parent didBlur event if it happens\n        emit(lastEmittedEvent = 'didBlur', childPayload);\n      }\n    }\n  }));\n  return (eventName, eventHandler) => {\n    const subscribers = getChildSubscribers(eventName);\n\n    if (!subscribers) {\n      throw new Error(`Invalid event name \"${eventName}\"`);\n    }\n\n    subscribers.add(eventHandler);\n\n    const remove = () => {\n      subscribers.delete(eventHandler);\n    };\n\n    return {\n      remove\n    };\n  };\n}","map":{"version":3,"sources":["/Users/eleanor/portfolio/node_modules/react-navigation/src/getChildEventSubscriber.js"],"names":["getChildEventSubscriber","addListener","key","actionSubscribers","Set","willFocusSubscribers","didFocusSubscribers","willBlurSubscribers","didBlurSubscribers","getChildSubscribers","evtName","emit","type","payload","payloadWithType","subscribers","forEach","subs","lastEmittedEvent","cleanup","upstreamSubscribers","remove","upstreamEvents","map","eventName","state","lastState","action","lastRoutes","routes","lastFocusKey","index","focusKey","isChildFocused","lastRoute","find","route","newRoute","childPayload","context","isTransitioning","previouslyLastEmittedEvent","eventHandler","Error","add","delete"],"mappings":"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","sourcesContent":["/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\n\nexport default function getChildEventSubscriber(addListener, key) {\n  const actionSubscribers = new Set();\n  const willFocusSubscribers = new Set();\n  const didFocusSubscribers = new Set();\n  const willBlurSubscribers = new Set();\n  const didBlurSubscribers = new Set();\n\n  const getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      default:\n        return null;\n    }\n  };\n\n  const emit = (type, payload) => {\n    const payloadWithType = { ...payload, type };\n    const subscribers = getChildSubscribers(type);\n    subscribers &&\n      subscribers.forEach(subs => {\n        subs(payloadWithType);\n      });\n  };\n\n  // lastEmittedEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n  let lastEmittedEvent = 'didBlur';\n\n  const cleanup = () => {\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  const upstreamEvents = [\n    'willFocus',\n    'didFocus',\n    'willBlur',\n    'didBlur',\n    'action',\n  ];\n\n  const upstreamSubscribers = upstreamEvents.map(eventName =>\n    addListener(eventName, payload => {\n      const { state, lastState, action } = payload;\n      const lastRoutes = lastState && lastState.routes;\n      const routes = state && state.routes;\n\n      const lastFocusKey =\n        lastState && lastState.routes && lastState.routes[lastState.index].key;\n      const focusKey = routes && routes[state.index].key;\n\n      const isChildFocused = focusKey === key;\n      const lastRoute =\n        lastRoutes && lastRoutes.find(route => route.key === key);\n      const newRoute = routes && routes.find(route => route.key === key);\n      const childPayload = {\n        context: `${key}:${action.type}_${payload.context || 'Root'}`,\n        state: newRoute,\n        lastState: lastRoute,\n        action,\n        type: eventName,\n      };\n      const isTransitioning = !!state && state.isTransitioning;\n\n      const previouslyLastEmittedEvent = lastEmittedEvent;\n\n      if (lastEmittedEvent === 'didBlur') {\n        // The child is currently blurred. Look for willFocus conditions\n        if (eventName === 'willFocus' && isChildFocused) {\n          emit((lastEmittedEvent = 'willFocus'), childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          emit((lastEmittedEvent = 'willFocus'), childPayload);\n        }\n      }\n      if (lastEmittedEvent === 'willFocus') {\n        // We are currently mid-focus. Look for didFocus conditions.\n        // If state.isTransitioning is false, this child event happens immediately after willFocus\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          emit((lastEmittedEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastEmittedEvent = 'didFocus'), childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'didFocus') {\n        // The child is currently focused. Look for blurring events\n        if (!isChildFocused) {\n          // The child is no longer focused within this navigation state\n          emit((lastEmittedEvent = 'willBlur'), childPayload);\n        } else if (eventName === 'willBlur') {\n          // The parent is getting a willBlur event\n          emit((lastEmittedEvent = 'willBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          previouslyLastEmittedEvent === 'didFocus'\n        ) {\n          // While focused, pass action events to children for grandchildren focus\n          emit('action', childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'willBlur') {\n        // The child is mid-blur. Wait for transition to end\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          // The child is done blurring because transitioning is over, or isTransitioning\n          // never began and didBlur fires immediately after willBlur\n          emit((lastEmittedEvent = 'didBlur'), childPayload);\n        } else if (eventName === 'didBlur') {\n          // Pass through the parent didBlur event if it happens\n          emit((lastEmittedEvent = 'didBlur'), childPayload);\n        }\n      }\n    })\n  );\n\n  return (eventName, eventHandler) => {\n    const subscribers = getChildSubscribers(eventName);\n    if (!subscribers) {\n      throw new Error(`Invalid event name \"${eventName}\"`);\n    }\n    subscribers.add(eventHandler);\n    const remove = () => {\n      subscribers.delete(eventHandler);\n    };\n    return { remove };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
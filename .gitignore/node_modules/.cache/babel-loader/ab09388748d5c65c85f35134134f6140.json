{"ast":null,"code":"/* Helpers for navigation */\nimport NavigationActions from './NavigationActions';\nimport invariant from './utils/invariant';\nexport default function (navigation) {\n  return { ...navigation,\n    goBack: key => {\n      let actualizedKey = key;\n\n      if (key === undefined && navigation.state.key) {\n        invariant(typeof navigation.state.key === 'string', 'key should be a string');\n        actualizedKey = navigation.state.key;\n      }\n\n      return navigation.dispatch(NavigationActions.back({\n        key: actualizedKey\n      }));\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return navigation.dispatch(NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action\n        }));\n      }\n\n      invariant(typeof navigateTo === 'object', 'Must navigateTo an object or a string');\n      invariant(params == null, 'Params must not be provided to .navigate() when specifying an object');\n      invariant(action == null, 'Child action must not be provided to .navigate() when specifying an object');\n      return navigation.dispatch(NavigationActions.navigate(navigateTo));\n    },\n    pop: (n, params) => navigation.dispatch(NavigationActions.pop({\n      n,\n      immediate: params && params.immediate\n    })),\n    popToTop: params => navigation.dispatch(NavigationActions.popToTop({\n      immediate: params && params.immediate\n    })),\n\n    /**\n     * For updating current route params. For example the nav bar title and\n     * buttons are based on the route params.\n     * This means `setParams` can be used to update nav bar for example.\n     */\n    setParams: params => {\n      invariant(navigation.state.key && typeof navigation.state.key === 'string', 'setParams cannot be called by root navigator');\n      const key = navigation.state.key;\n      return navigation.dispatch(NavigationActions.setParams({\n        params,\n        key\n      }));\n    },\n    getParam: (paramName, defaultValue) => {\n      const params = navigation.state.params;\n\n      if (params && paramName in params) {\n        return params[paramName];\n      }\n\n      return defaultValue;\n    },\n    push: (routeName, params, action) => navigation.dispatch(NavigationActions.push({\n      routeName,\n      params,\n      action\n    })),\n    replace: (routeName, params, action) => navigation.dispatch(NavigationActions.replace({\n      routeName,\n      params,\n      action,\n      key: navigation.state.key\n    }))\n  };\n}","map":{"version":3,"sources":["/Users/eleanor/portfolio/node_modules/react-navigation/src/addNavigationHelpers.js"],"names":["NavigationActions","invariant","navigation","goBack","key","actualizedKey","undefined","state","dispatch","back","navigate","navigateTo","params","action","routeName","pop","n","immediate","popToTop","setParams","getParam","paramName","defaultValue","push","replace"],"mappings":"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","sourcesContent":["/* Helpers for navigation */\n\nimport NavigationActions from './NavigationActions';\nimport invariant from './utils/invariant';\n\nexport default function(navigation) {\n  return {\n    ...navigation,\n    goBack: key => {\n      let actualizedKey = key;\n      if (key === undefined && navigation.state.key) {\n        invariant(\n          typeof navigation.state.key === 'string',\n          'key should be a string'\n        );\n        actualizedKey = navigation.state.key;\n      }\n      return navigation.dispatch(\n        NavigationActions.back({ key: actualizedKey })\n      );\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return navigation.dispatch(\n          NavigationActions.navigate({ routeName: navigateTo, params, action })\n        );\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return navigation.dispatch(NavigationActions.navigate(navigateTo));\n    },\n    pop: (n, params) =>\n      navigation.dispatch(\n        NavigationActions.pop({ n, immediate: params && params.immediate })\n      ),\n    popToTop: params =>\n      navigation.dispatch(\n        NavigationActions.popToTop({ immediate: params && params.immediate })\n      ),\n    /**\n     * For updating current route params. For example the nav bar title and\n     * buttons are based on the route params.\n     * This means `setParams` can be used to update nav bar for example.\n     */\n    setParams: params => {\n      invariant(\n        navigation.state.key && typeof navigation.state.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      const key = navigation.state.key;\n      return navigation.dispatch(NavigationActions.setParams({ params, key }));\n    },\n\n    getParam: (paramName, defaultValue) => {\n      const params = navigation.state.params;\n\n      if (params && paramName in params) {\n        return params[paramName];\n      }\n\n      return defaultValue;\n    },\n\n    push: (routeName, params, action) =>\n      navigation.dispatch(\n        NavigationActions.push({ routeName, params, action })\n      ),\n\n    replace: (routeName, params, action) =>\n      navigation.dispatch(\n        NavigationActions.replace({\n          routeName,\n          params,\n          action,\n          key: navigation.state.key,\n        })\n      ),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
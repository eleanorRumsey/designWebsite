{"ast":null,"code":"import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport addNavigationHelpers from '../addNavigationHelpers';\nimport validateScreenOptions from './validateScreenOptions';\nimport getChildEventSubscriber from '../getChildEventSubscriber';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return { ...navigationOptions,\n      ...configurer({ ...configProps,\n        navigationOptions\n      })\n    };\n  }\n\n  if (typeof configurer === 'object') {\n    return { ...navigationOptions,\n      ...configurer\n    };\n  }\n\n  return navigationOptions;\n}\n\nexport default ((routeConfigs, navigatorScreenConfig) => (navigation, screenProps) => {\n  const state = navigation.state,\n        dispatch = navigation.dispatch;\n  const route = state;\n  invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n  let outputConfig = {};\n  const router = Component.router;\n\n  if (router) {\n    const routes = route.routes,\n          index = route.index;\n\n    if (!route || !routes || index == null) {\n      throw new Error(`Expect nav state to have routes and index, ${JSON.stringify(route)}`);\n    }\n\n    const childRoute = routes[index];\n    const childNavigation = addNavigationHelpers({\n      state: childRoute,\n      dispatch,\n      addListener: getChildEventSubscriber(navigation.addListener, childRoute.key)\n    });\n    outputConfig = router.getScreenOptions(childNavigation, screenProps);\n  }\n\n  const routeConfig = routeConfigs[route.routeName];\n  const routeScreenConfig = routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n  const configOptions = {\n    navigation,\n    screenProps: screenProps || {}\n  };\n  outputConfig = applyConfig(navigatorScreenConfig, outputConfig, configOptions);\n  outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n  validateScreenOptions(outputConfig, route);\n  return outputConfig;\n});","map":{"version":3,"sources":["/Users/eleanor/portfolio/node_modules/react-navigation/src/routers/createConfigGetter.js"],"names":["invariant","getScreenForRouteName","addNavigationHelpers","validateScreenOptions","getChildEventSubscriber","applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","state","dispatch","route","routeName","Component","outputConfig","router","routes","index","Error","JSON","stringify","childRoute","childNavigation","addListener","key","getScreenOptions","routeConfig","routeScreenConfig","componentScreenConfig","configOptions"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AAEA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,uBAAP,MAAoC,4BAApC;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,iBAAjC,EAAoDC,WAApD,EAAiE;AAC/D,MAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpC,WAAO,EACL,GAAGC,iBADE;AAEL,SAAGD,UAAU,CAAC,EACZ,GAAGE,WADS;AAEZD,QAAAA;AAFY,OAAD;AAFR,KAAP;AAOD;;AACD,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAO,EACL,GAAGC,iBADE;AAEL,SAAGD;AAFE,KAAP;AAID;;AACD,SAAOC,iBAAP;AACD;;AAED,gBAAe,CAACE,YAAD,EAAeC,qBAAf,KAAyC,CACtDC,UADsD,EAEtDC,WAFsD,KAGnD;AAAA,QACKC,KADL,GACyBF,UADzB,CACKE,KADL;AAAA,QACYC,QADZ,GACyBH,UADzB,CACYG,QADZ;AAEH,QAAMC,KAAK,GAAGF,KAAd;AAEAb,EAAAA,SAAS,CACPe,KAAK,CAACC,SAAN,IAAmB,OAAOD,KAAK,CAACC,SAAb,KAA2B,QADvC,EAEP,gEAFO,CAAT;AAKA,QAAMC,SAAS,GAAGhB,qBAAqB,CAACQ,YAAD,EAAeM,KAAK,CAACC,SAArB,CAAvC;AAEA,MAAIE,YAAY,GAAG,EAAnB;AAEA,QAAMC,MAAM,GAAGF,SAAS,CAACE,MAAzB;;AACA,MAAIA,MAAJ,EAAY;AAAA,UACFC,MADE,GACgBL,KADhB,CACFK,MADE;AAAA,UACMC,KADN,GACgBN,KADhB,CACMM,KADN;;AAEV,QAAI,CAACN,KAAD,IAAU,CAACK,MAAX,IAAqBC,KAAK,IAAI,IAAlC,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CACH,8CAA6CC,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAsB,EADhE,CAAN;AAGD;;AACD,UAAMU,UAAU,GAAGL,MAAM,CAACC,KAAD,CAAzB;AACA,UAAMK,eAAe,GAAGxB,oBAAoB,CAAC;AAC3CW,MAAAA,KAAK,EAAEY,UADoC;AAE3CX,MAAAA,QAF2C;AAG3Ca,MAAAA,WAAW,EAAEvB,uBAAuB,CAClCO,UAAU,CAACgB,WADuB,EAElCF,UAAU,CAACG,GAFuB;AAHO,KAAD,CAA5C;AAQAV,IAAAA,YAAY,GAAGC,MAAM,CAACU,gBAAP,CAAwBH,eAAxB,EAAyCd,WAAzC,CAAf;AACD;;AAED,QAAMkB,WAAW,GAAGrB,YAAY,CAACM,KAAK,CAACC,SAAP,CAAhC;AAEA,QAAMe,iBAAiB,GAAGD,WAAW,CAACvB,iBAAtC;AACA,QAAMyB,qBAAqB,GAAGf,SAAS,CAACV,iBAAxC;AAEA,QAAM0B,aAAa,GAAG;AAAEtB,IAAAA,UAAF;AAAcC,IAAAA,WAAW,EAAEA,WAAW,IAAI;AAA1C,GAAtB;AAEAM,EAAAA,YAAY,GAAGb,WAAW,CACxBK,qBADwB,EAExBQ,YAFwB,EAGxBe,aAHwB,CAA1B;AAKAf,EAAAA,YAAY,GAAGb,WAAW,CACxB2B,qBADwB,EAExBd,YAFwB,EAGxBe,aAHwB,CAA1B;AAKAf,EAAAA,YAAY,GAAGb,WAAW,CAAC0B,iBAAD,EAAoBb,YAApB,EAAkCe,aAAlC,CAA1B;AAEA9B,EAAAA,qBAAqB,CAACe,YAAD,EAAeH,KAAf,CAArB;AAEA,SAAOG,YAAP;AACD,CA1DD","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport addNavigationHelpers from '../addNavigationHelpers';\nimport validateScreenOptions from './validateScreenOptions';\nimport getChildEventSubscriber from '../getChildEventSubscriber';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps\n) => {\n  const { state, dispatch } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  let outputConfig = {};\n\n  const router = Component.router;\n  if (router) {\n    const { routes, index } = route;\n    if (!route || !routes || index == null) {\n      throw new Error(\n        `Expect nav state to have routes and index, ${JSON.stringify(route)}`\n      );\n    }\n    const childRoute = routes[index];\n    const childNavigation = addNavigationHelpers({\n      state: childRoute,\n      dispatch,\n      addListener: getChildEventSubscriber(\n        navigation.addListener,\n        childRoute.key\n      ),\n    });\n    outputConfig = router.getScreenOptions(childNavigation, screenProps);\n  }\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig = routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  outputConfig = applyConfig(\n    navigatorScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"module"}